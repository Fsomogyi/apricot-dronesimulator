/**
 */
package hu.bme.mit.mdsd.dns2016.behaviour.provider;

import hu.bme.mit.mdsd.dns2016.behaviour.util.BehaviourAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BehaviourItemProviderAdapterFactory extends BehaviourAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BehaviourItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.mdsd.dns2016.behaviour.DroneBehaviour} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DroneBehaviourItemProvider droneBehaviourItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.mdsd.dns2016.behaviour.DroneBehaviour}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDroneBehaviourAdapter() {
		if (droneBehaviourItemProvider == null) {
			droneBehaviourItemProvider = new DroneBehaviourItemProvider(this);
		}

		return droneBehaviourItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.mdsd.dns2016.behaviour.MoveTo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MoveToItemProvider moveToItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.mdsd.dns2016.behaviour.MoveTo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMoveToAdapter() {
		if (moveToItemProvider == null) {
			moveToItemProvider = new MoveToItemProvider(this);
		}

		return moveToItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.mdsd.dns2016.behaviour.Pause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PauseItemProvider pauseItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.mdsd.dns2016.behaviour.Pause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPauseAdapter() {
		if (pauseItemProvider == null) {
			pauseItemProvider = new PauseItemProvider(this);
		}

		return pauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.mdsd.dns2016.behaviour.PerformAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PerformActionItemProvider performActionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.mdsd.dns2016.behaviour.PerformAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPerformActionAdapter() {
		if (performActionItemProvider == null) {
			performActionItemProvider = new PerformActionItemProvider(this);
		}

		return performActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.mdsd.dns2016.behaviour.Choice} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChoiceItemProvider choiceItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.mdsd.dns2016.behaviour.Choice}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChoiceAdapter() {
		if (choiceItemProvider == null) {
			choiceItemProvider = new ChoiceItemProvider(this);
		}

		return choiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.mdsd.dns2016.behaviour.Condition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionItemProvider conditionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.mdsd.dns2016.behaviour.Condition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionAdapter() {
		if (conditionItemProvider == null) {
			conditionItemProvider = new ConditionItemProvider(this);
		}

		return conditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.mdsd.dns2016.behaviour.WaitForMessage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WaitForMessageItemProvider waitForMessageItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.mdsd.dns2016.behaviour.WaitForMessage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWaitForMessageAdapter() {
		if (waitForMessageItemProvider == null) {
			waitForMessageItemProvider = new WaitForMessageItemProvider(this);
		}

		return waitForMessageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.mdsd.dns2016.behaviour.While} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhileItemProvider whileItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.mdsd.dns2016.behaviour.While}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhileAdapter() {
		if (whileItemProvider == null) {
			whileItemProvider = new WhileItemProvider(this);
		}

		return whileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.mdsd.dns2016.behaviour.Instruct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstructItemProvider instructItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.mdsd.dns2016.behaviour.Instruct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstructAdapter() {
		if (instructItemProvider == null) {
			instructItemProvider = new InstructItemProvider(this);
		}

		return instructItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.mdsd.dns2016.behaviour.Lift} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LiftItemProvider liftItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.mdsd.dns2016.behaviour.Lift}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLiftAdapter() {
		if (liftItemProvider == null) {
			liftItemProvider = new LiftItemProvider(this);
		}

		return liftItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.mdsd.dns2016.behaviour.PlaceObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlaceObjectItemProvider placeObjectItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.mdsd.dns2016.behaviour.PlaceObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlaceObjectAdapter() {
		if (placeObjectItemProvider == null) {
			placeObjectItemProvider = new PlaceObjectItemProvider(this);
		}

		return placeObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.mdsd.dns2016.behaviour.SendMessage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SendMessageItemProvider sendMessageItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.mdsd.dns2016.behaviour.SendMessage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSendMessageAdapter() {
		if (sendMessageItemProvider == null) {
			sendMessageItemProvider = new SendMessageItemProvider(this);
		}

		return sendMessageItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (droneBehaviourItemProvider != null) droneBehaviourItemProvider.dispose();
		if (moveToItemProvider != null) moveToItemProvider.dispose();
		if (pauseItemProvider != null) pauseItemProvider.dispose();
		if (performActionItemProvider != null) performActionItemProvider.dispose();
		if (choiceItemProvider != null) choiceItemProvider.dispose();
		if (conditionItemProvider != null) conditionItemProvider.dispose();
		if (waitForMessageItemProvider != null) waitForMessageItemProvider.dispose();
		if (whileItemProvider != null) whileItemProvider.dispose();
		if (instructItemProvider != null) instructItemProvider.dispose();
		if (liftItemProvider != null) liftItemProvider.dispose();
		if (placeObjectItemProvider != null) placeObjectItemProvider.dispose();
		if (sendMessageItemProvider != null) sendMessageItemProvider.dispose();
	}

}
