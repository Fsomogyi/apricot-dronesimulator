/*
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.mdsd.dns2016.drones.text.serializer;

import com.google.inject.Inject;
import hu.bme.mit.mdsd.dns2016.drones.ChargeStation;
import hu.bme.mit.mdsd.dns2016.drones.Drone;
import hu.bme.mit.mdsd.dns2016.drones.DronesPackage;
import hu.bme.mit.mdsd.dns2016.drones.ImmovableObject;
import hu.bme.mit.mdsd.dns2016.drones.Mission;
import hu.bme.mit.mdsd.dns2016.drones.MovableObject;
import hu.bme.mit.mdsd.dns2016.drones.text.services.DronesDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DronesDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DronesDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DronesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DronesPackage.ACTION:
				sequence_Action(context, (hu.bme.mit.mdsd.dns2016.drones.Action) semanticObject); 
				return; 
			case DronesPackage.CHARGE_STATION:
				sequence_ChargeStation(context, (ChargeStation) semanticObject); 
				return; 
			case DronesPackage.DRONE:
				sequence_Drone(context, (Drone) semanticObject); 
				return; 
			case DronesPackage.IMMOVABLE_OBJECT:
				sequence_ImmovableObject(context, (ImmovableObject) semanticObject); 
				return; 
			case DronesPackage.MISSION:
				sequence_Mission(context, (Mission) semanticObject); 
				return; 
			case DronesPackage.MOVABLE_OBJECT:
				sequence_MovableObject(context, (MovableObject) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Action(ISerializationContext context, hu.bme.mit.mdsd.dns2016.drones.Action semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DronesPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionAccess().getNameEStringParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FieldObject returns ChargeStation
	 *     ChargeStation returns ChargeStation
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_ChargeStation(ISerializationContext context, ChargeStation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DronesPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getChargeStationAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Drone returns Drone
	 *
	 * Constraint:
	 *     (name=EString (supportedActions+=[Action|EString] supportedActions+=[Action|EString]*)?)
	 */
	protected void sequence_Drone(ISerializationContext context, Drone semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FieldObject returns ImmovableObject
	 *     ImmovableObject returns ImmovableObject
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_ImmovableObject(ISerializationContext context, ImmovableObject semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DronesPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImmovableObjectAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Mission returns Mission
	 *
	 * Constraint:
	 *     ((actions+=Action actions+=Action*)? (drones+=Drone drones+=Drone*)? (fieldObjects+=FieldObject fieldObjects+=FieldObject*)?)
	 */
	protected void sequence_Mission(ISerializationContext context, Mission semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FieldObject returns MovableObject
	 *     MovableObject returns MovableObject
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_MovableObject(ISerializationContext context, MovableObject semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DronesPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DronesPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMovableObjectAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
