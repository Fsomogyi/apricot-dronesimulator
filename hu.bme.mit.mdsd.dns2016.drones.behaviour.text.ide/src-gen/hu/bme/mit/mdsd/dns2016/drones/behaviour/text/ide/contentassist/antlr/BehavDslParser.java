/*
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.mdsd.dns2016.drones.behaviour.text.ide.contentassist.antlr;

import com.google.inject.Inject;
import hu.bme.mit.mdsd.dns2016.drones.behaviour.text.ide.contentassist.antlr.internal.InternalBehavDslParser;
import hu.bme.mit.mdsd.dns2016.drones.behaviour.text.services.BehavDslGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class BehavDslParser extends AbstractContentAssistParser {

	@Inject
	private BehavDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalBehavDslParser createParser() {
		InternalBehavDslParser result = new InternalBehavDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getInstructionAccess().getAlternatives(), "rule__Instruction__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEFloatAccess().getAlternatives_3_0(), "rule__EFloat__Alternatives_3_0");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getConditionKindAccess().getAlternatives(), "rule__ConditionKind__Alternatives");
					put(grammarAccess.getBehavDSLAccess().getGroup(), "rule__BehavDSL__Group__0");
					put(grammarAccess.getDroneBehaviourAccess().getGroup(), "rule__DroneBehaviour__Group__0");
					put(grammarAccess.getDroneBehaviourAccess().getGroup_11(), "rule__DroneBehaviour__Group_11__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getMoveToAccess().getGroup(), "rule__MoveTo__Group__0");
					put(grammarAccess.getPauseAccess().getGroup(), "rule__Pause__Group__0");
					put(grammarAccess.getPerformActionAccess().getGroup(), "rule__PerformAction__Group__0");
					put(grammarAccess.getChoiceAccess().getGroup(), "rule__Choice__Group__0");
					put(grammarAccess.getChoiceAccess().getGroup_6(), "rule__Choice__Group_6__0");
					put(grammarAccess.getWaitForMessageAccess().getGroup(), "rule__WaitForMessage__Group__0");
					put(grammarAccess.getWhileAccess().getGroup(), "rule__While__Group__0");
					put(grammarAccess.getLiftAccess().getGroup(), "rule__Lift__Group__0");
					put(grammarAccess.getPlaceObjectAccess().getGroup(), "rule__PlaceObject__Group__0");
					put(grammarAccess.getInstructAccess().getGroup(), "rule__Instruct__Group__0");
					put(grammarAccess.getSendMessageAccess().getGroup(), "rule__SendMessage__Group__0");
					put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
					put(grammarAccess.getEFloatAccess().getGroup(), "rule__EFloat__Group__0");
					put(grammarAccess.getEFloatAccess().getGroup_3(), "rule__EFloat__Group_3__0");
					put(grammarAccess.getBehavDSLAccess().getImportedMissionAssignment_0(), "rule__BehavDSL__ImportedMissionAssignment_0");
					put(grammarAccess.getBehavDSLAccess().getBehavAssignment_1(), "rule__BehavDSL__BehavAssignment_1");
					put(grammarAccess.getDroneBehaviourAccess().getNameAssignment_1(), "rule__DroneBehaviour__NameAssignment_1");
					put(grammarAccess.getDroneBehaviourAccess().getCanBeInterruptedAssignment_5(), "rule__DroneBehaviour__CanBeInterruptedAssignment_5");
					put(grammarAccess.getDroneBehaviourAccess().getDronesAssignment_10(), "rule__DroneBehaviour__DronesAssignment_10");
					put(grammarAccess.getDroneBehaviourAccess().getDronesAssignment_11_1(), "rule__DroneBehaviour__DronesAssignment_11_1");
					put(grammarAccess.getDroneBehaviourAccess().getInstructionsAssignment_13(), "rule__DroneBehaviour__InstructionsAssignment_13");
					put(grammarAccess.getDroneBehaviourAccess().getInstructionsAssignment_14(), "rule__DroneBehaviour__InstructionsAssignment_14");
					put(grammarAccess.getImportAccess().getImportNameAssignment_1(), "rule__Import__ImportNameAssignment_1");
					put(grammarAccess.getMoveToAccess().getFieldObjectAssignment_1(), "rule__MoveTo__FieldObjectAssignment_1");
					put(grammarAccess.getPauseAccess().getDurationAssignment_1(), "rule__Pause__DurationAssignment_1");
					put(grammarAccess.getPerformActionAccess().getActionAssignment_1(), "rule__PerformAction__ActionAssignment_1");
					put(grammarAccess.getPerformActionAccess().getTargetAssignment_3(), "rule__PerformAction__TargetAssignment_3");
					put(grammarAccess.getChoiceAccess().getConditionAssignment_1(), "rule__Choice__ConditionAssignment_1");
					put(grammarAccess.getChoiceAccess().getTrueBranchAssignment_3(), "rule__Choice__TrueBranchAssignment_3");
					put(grammarAccess.getChoiceAccess().getTrueBranchAssignment_4(), "rule__Choice__TrueBranchAssignment_4");
					put(grammarAccess.getChoiceAccess().getFalseBranchAssignment_6_2(), "rule__Choice__FalseBranchAssignment_6_2");
					put(grammarAccess.getChoiceAccess().getFalseBranchAssignment_6_3(), "rule__Choice__FalseBranchAssignment_6_3");
					put(grammarAccess.getWaitForMessageAccess().getTypeAssignment_1(), "rule__WaitForMessage__TypeAssignment_1");
					put(grammarAccess.getWaitForMessageAccess().getTimeoutAssignment_2(), "rule__WaitForMessage__TimeoutAssignment_2");
					put(grammarAccess.getWaitForMessageAccess().getWhenArrivedAssignment_4(), "rule__WaitForMessage__WhenArrivedAssignment_4");
					put(grammarAccess.getWaitForMessageAccess().getWhenArrivedAssignment_5(), "rule__WaitForMessage__WhenArrivedAssignment_5");
					put(grammarAccess.getWaitForMessageAccess().getWhenLostAssignment_9(), "rule__WaitForMessage__WhenLostAssignment_9");
					put(grammarAccess.getWaitForMessageAccess().getWhenLostAssignment_10(), "rule__WaitForMessage__WhenLostAssignment_10");
					put(grammarAccess.getWhileAccess().getConditionAssignment_1(), "rule__While__ConditionAssignment_1");
					put(grammarAccess.getWhileAccess().getInstructionsAssignment_3(), "rule__While__InstructionsAssignment_3");
					put(grammarAccess.getWhileAccess().getInstructionsAssignment_4(), "rule__While__InstructionsAssignment_4");
					put(grammarAccess.getLiftAccess().getTargetAssignment_1(), "rule__Lift__TargetAssignment_1");
					put(grammarAccess.getInstructAccess().getInstructionsAssignment_3(), "rule__Instruct__InstructionsAssignment_3");
					put(grammarAccess.getInstructAccess().getInstructionsAssignment_4(), "rule__Instruct__InstructionsAssignment_4");
					put(grammarAccess.getSendMessageAccess().getMessageTypeAssignment_2(), "rule__SendMessage__MessageTypeAssignment_2");
					put(grammarAccess.getConditionAccess().getFieldObjectAssignment_2(), "rule__Condition__FieldObjectAssignment_2");
					put(grammarAccess.getConditionAccess().getKeyAssignment_4(), "rule__Condition__KeyAssignment_4");
					put(grammarAccess.getConditionAccess().getOperationAssignment_5(), "rule__Condition__OperationAssignment_5");
					put(grammarAccess.getConditionAccess().getValueAssignment_6(), "rule__Condition__ValueAssignment_6");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalBehavDslParser typedParser = (InternalBehavDslParser) parser;
			typedParser.entryRuleBehavDSL();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BehavDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BehavDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
