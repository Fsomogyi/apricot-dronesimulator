/**
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.mdsd.dns2016.drones.behaviour.text.scoping;

import com.google.common.base.Objects;
import hu.bme.mit.mdsd.dns2016.behaviour.Condition;
import hu.bme.mit.mdsd.dns2016.behaviour.DroneBehaviour;
import hu.bme.mit.mdsd.dns2016.behaviour.Lift;
import hu.bme.mit.mdsd.dns2016.behaviour.MoveTo;
import hu.bme.mit.mdsd.dns2016.behaviour.PerformAction;
import hu.bme.mit.mdsd.dns2016.drones.Action;
import hu.bme.mit.mdsd.dns2016.drones.Drone;
import hu.bme.mit.mdsd.dns2016.drones.FieldObject;
import hu.bme.mit.mdsd.dns2016.drones.Mission;
import hu.bme.mit.mdsd.dns2016.drones.MovableObject;
import hu.bme.mit.mdsd.dns2016.drones.behaviour.text.resource.ResourceHandler;
import hu.bme.mit.mdsd.dns2016.drones.behaviour.text.scoping.AbstractBehavDslScopeProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class BehavDslScopeProvider extends AbstractBehavDslScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    ResourceHandler _instance = ResourceHandler.getInstance();
    Mission mission = _instance.getMission();
    boolean _notEquals = (!Objects.equal(mission, null));
    if (_notEquals) {
      if ((context instanceof DroneBehaviour)) {
        EList<Drone> _drones = mission.getDrones();
        return Scopes.scopeFor(_drones);
      } else {
        if ((context instanceof MoveTo)) {
          EList<FieldObject> _fieldObjects = mission.getFieldObjects();
          return Scopes.scopeFor(_fieldObjects);
        } else {
          if ((context instanceof Lift)) {
            EList<FieldObject> _fieldObjects_1 = mission.getFieldObjects();
            final Function1<FieldObject, Boolean> _function = (FieldObject fo) -> {
              return Boolean.valueOf((fo instanceof MovableObject));
            };
            Iterable<FieldObject> _filter = IterableExtensions.<FieldObject>filter(_fieldObjects_1, _function);
            return Scopes.scopeFor(_filter);
          } else {
            if ((context instanceof PerformAction)) {
              String _name = reference.getName();
              boolean _equals = _name.equals("action");
              if (_equals) {
                EList<Action> _actions = mission.getActions();
                return Scopes.scopeFor(_actions);
              } else {
                EList<FieldObject> _fieldObjects_2 = mission.getFieldObjects();
                return Scopes.scopeFor(_fieldObjects_2);
              }
            } else {
              if ((context instanceof Condition)) {
                EList<FieldObject> _fieldObjects_3 = mission.getFieldObjects();
                return Scopes.scopeFor(_fieldObjects_3);
              }
            }
          }
        }
      }
    }
    return super.getScope(context, reference);
  }
}
