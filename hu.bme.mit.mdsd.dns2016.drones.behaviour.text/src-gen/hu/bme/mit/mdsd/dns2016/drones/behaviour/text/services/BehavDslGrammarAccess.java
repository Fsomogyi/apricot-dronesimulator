/*
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.mdsd.dns2016.drones.behaviour.text.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BehavDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class BehavDSLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.dns2016.drones.behaviour.text.BehavDsl.BehavDSL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportedMissionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportedMissionImportParserRuleCall_0_0 = (RuleCall)cImportedMissionAssignment_0.eContents().get(0);
		private final Assignment cBehavAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBehavDroneBehaviourParserRuleCall_1_0 = (RuleCall)cBehavAssignment_1.eContents().get(0);
		
		//// TODO: separate config files?
		//BehavDSL:
		//	importedMission=Import
		//	behav=DroneBehaviour;
		@Override public ParserRule getRule() { return rule; }
		
		//importedMission=Import behav=DroneBehaviour
		public Group getGroup() { return cGroup; }
		
		//importedMission=Import
		public Assignment getImportedMissionAssignment_0() { return cImportedMissionAssignment_0; }
		
		//Import
		public RuleCall getImportedMissionImportParserRuleCall_0_0() { return cImportedMissionImportParserRuleCall_0_0; }
		
		//behav=DroneBehaviour
		public Assignment getBehavAssignment_1() { return cBehavAssignment_1; }
		
		//DroneBehaviour
		public RuleCall getBehavDroneBehaviourParserRuleCall_1_0() { return cBehavDroneBehaviourParserRuleCall_1_0; }
	}
	public class DroneBehaviourElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.dns2016.drones.behaviour.text.BehavDsl.DroneBehaviour");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBehavKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cInterruptKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCanBeInterruptedAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCanBeInterruptedEBooleanParserRuleCall_5_0 = (RuleCall)cCanBeInterruptedAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cDronesKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cDronesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cDronesDroneCrossReference_10_0 = (CrossReference)cDronesAssignment_10.eContents().get(0);
		private final RuleCall cDronesDroneIDTerminalRuleCall_10_0_1 = (RuleCall)cDronesDroneCrossReference_10_0.eContents().get(1);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cCommaKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cDronesAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final CrossReference cDronesDroneCrossReference_11_1_0 = (CrossReference)cDronesAssignment_11_1.eContents().get(0);
		private final RuleCall cDronesDroneIDTerminalRuleCall_11_1_0_1 = (RuleCall)cDronesDroneCrossReference_11_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cInstructionsAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cInstructionsInstructionParserRuleCall_13_0 = (RuleCall)cInstructionsAssignment_13.eContents().get(0);
		private final Assignment cInstructionsAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cInstructionsInstructionParserRuleCall_14_0 = (RuleCall)cInstructionsAssignment_14.eContents().get(0);
		
		//DroneBehaviour behav::DroneBehaviour:
		//	'behav'
		//	name=EString
		//	'(' 'interrupt' '=' canBeInterrupted?=EBoolean ')' ';'
		//	'drones' '{' drones+=[drones::Drone] ("," drones+=[drones::Drone])* '}'
		//	instructions+=Instruction instructions+=Instruction*
		@Override public ParserRule getRule() { return rule; }
		
		//'behav' name=EString '(' 'interrupt' '=' canBeInterrupted?=EBoolean ')' ';' 'drones' '{' drones+=[drones::Drone] (","
		//drones+=[drones::Drone])* '}' instructions+=Instruction instructions+=Instruction*
		public Group getGroup() { return cGroup; }
		
		//'behav'
		public Keyword getBehavKeyword_0() { return cBehavKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'interrupt'
		public Keyword getInterruptKeyword_3() { return cInterruptKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//canBeInterrupted?=EBoolean
		public Assignment getCanBeInterruptedAssignment_5() { return cCanBeInterruptedAssignment_5; }
		
		//EBoolean
		public RuleCall getCanBeInterruptedEBooleanParserRuleCall_5_0() { return cCanBeInterruptedEBooleanParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
		
		//'drones'
		public Keyword getDronesKeyword_8() { return cDronesKeyword_8; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }
		
		//drones+=[drones::Drone]
		public Assignment getDronesAssignment_10() { return cDronesAssignment_10; }
		
		//[drones::Drone]
		public CrossReference getDronesDroneCrossReference_10_0() { return cDronesDroneCrossReference_10_0; }
		
		//ID
		public RuleCall getDronesDroneIDTerminalRuleCall_10_0_1() { return cDronesDroneIDTerminalRuleCall_10_0_1; }
		
		//("," drones+=[drones::Drone])*
		public Group getGroup_11() { return cGroup_11; }
		
		//","
		public Keyword getCommaKeyword_11_0() { return cCommaKeyword_11_0; }
		
		//drones+=[drones::Drone]
		public Assignment getDronesAssignment_11_1() { return cDronesAssignment_11_1; }
		
		//[drones::Drone]
		public CrossReference getDronesDroneCrossReference_11_1_0() { return cDronesDroneCrossReference_11_1_0; }
		
		//ID
		public RuleCall getDronesDroneIDTerminalRuleCall_11_1_0_1() { return cDronesDroneIDTerminalRuleCall_11_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
		
		//instructions+=Instruction
		public Assignment getInstructionsAssignment_13() { return cInstructionsAssignment_13; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_13_0() { return cInstructionsInstructionParserRuleCall_13_0; }
		
		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_14() { return cInstructionsAssignment_14; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_14_0() { return cInstructionsInstructionParserRuleCall_14_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.dns2016.drones.behaviour.text.BehavDsl.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cImportNameAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' importName=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importName=STRING
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importName=STRING
		public Assignment getImportNameAssignment_1() { return cImportNameAssignment_1; }
		
		//STRING
		public RuleCall getImportNameSTRINGTerminalRuleCall_1_0() { return cImportNameSTRINGTerminalRuleCall_1_0; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.dns2016.drones.behaviour.text.BehavDsl.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMoveToParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPerformActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cChoiceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWaitForMessageParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cWhileParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLiftParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cPlaceObjectParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSendMessageParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cInstructParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Instruction behav::Instruction:
		//	MoveTo | Pause | PerformAction | Choice | WaitForMessage | While | Lift | PlaceObject | SendMessage | Instruct
		@Override public ParserRule getRule() { return rule; }
		
		//MoveTo | Pause | PerformAction | Choice | WaitForMessage | While | Lift | PlaceObject | SendMessage | Instruct
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MoveTo
		public RuleCall getMoveToParserRuleCall_0() { return cMoveToParserRuleCall_0; }
		
		//Pause
		public RuleCall getPauseParserRuleCall_1() { return cPauseParserRuleCall_1; }
		
		//PerformAction
		public RuleCall getPerformActionParserRuleCall_2() { return cPerformActionParserRuleCall_2; }
		
		//Choice
		public RuleCall getChoiceParserRuleCall_3() { return cChoiceParserRuleCall_3; }
		
		//WaitForMessage
		public RuleCall getWaitForMessageParserRuleCall_4() { return cWaitForMessageParserRuleCall_4; }
		
		//While
		public RuleCall getWhileParserRuleCall_5() { return cWhileParserRuleCall_5; }
		
		//Lift
		public RuleCall getLiftParserRuleCall_6() { return cLiftParserRuleCall_6; }
		
		//PlaceObject
		public RuleCall getPlaceObjectParserRuleCall_7() { return cPlaceObjectParserRuleCall_7; }
		
		//SendMessage
		public RuleCall getSendMessageParserRuleCall_8() { return cSendMessageParserRuleCall_8; }
		
		//Instruct
		public RuleCall getInstructParserRuleCall_9() { return cInstructParserRuleCall_9; }
	}
	public class MoveToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.dns2016.drones.behaviour.text.BehavDsl.MoveTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMovetoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFieldObjectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFieldObjectFieldObjectCrossReference_1_0 = (CrossReference)cFieldObjectAssignment_1.eContents().get(0);
		private final RuleCall cFieldObjectFieldObjectIDTerminalRuleCall_1_0_1 = (RuleCall)cFieldObjectFieldObjectCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MoveTo behav::MoveTo:
		//	'moveto'
		//	fieldObject=[drones::FieldObject]
		//	';'
		@Override public ParserRule getRule() { return rule; }
		
		//'moveto' fieldObject=[drones::FieldObject] ';'
		public Group getGroup() { return cGroup; }
		
		//'moveto'
		public Keyword getMovetoKeyword_0() { return cMovetoKeyword_0; }
		
		//fieldObject=[drones::FieldObject]
		public Assignment getFieldObjectAssignment_1() { return cFieldObjectAssignment_1; }
		
		//[drones::FieldObject]
		public CrossReference getFieldObjectFieldObjectCrossReference_1_0() { return cFieldObjectFieldObjectCrossReference_1_0; }
		
		//ID
		public RuleCall getFieldObjectFieldObjectIDTerminalRuleCall_1_0_1() { return cFieldObjectFieldObjectIDTerminalRuleCall_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class PauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.dns2016.drones.behaviour.text.BehavDsl.Pause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWaitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDurationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDurationEFloatParserRuleCall_1_0 = (RuleCall)cDurationAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Pause behav::Pause:
		//	'wait'
		//	duration=EFloat
		//	';'
		@Override public ParserRule getRule() { return rule; }
		
		//'wait' duration=EFloat ';'
		public Group getGroup() { return cGroup; }
		
		//'wait'
		public Keyword getWaitKeyword_0() { return cWaitKeyword_0; }
		
		//duration=EFloat
		public Assignment getDurationAssignment_1() { return cDurationAssignment_1; }
		
		//EFloat
		public RuleCall getDurationEFloatParserRuleCall_1_0() { return cDurationEFloatParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class PerformActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.dns2016.drones.behaviour.text.BehavDsl.PerformAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cActionActionCrossReference_1_0 = (CrossReference)cActionAssignment_1.eContents().get(0);
		private final RuleCall cActionActionEStringParserRuleCall_1_0_1 = (RuleCall)cActionActionCrossReference_1_0.eContents().get(1);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetFieldObjectCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetFieldObjectEStringParserRuleCall_3_0_1 = (RuleCall)cTargetFieldObjectCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PerformAction behav::PerformAction:
		//	'action'
		//	action=[drones::Action|EString]
		//	'on'
		//	target=[drones::FieldObject|EString]
		//	';'
		@Override public ParserRule getRule() { return rule; }
		
		//'action' action=[drones::Action|EString] 'on' target=[drones::FieldObject|EString] ';'
		public Group getGroup() { return cGroup; }
		
		//'action'
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }
		
		//action=[drones::Action|EString]
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }
		
		//[drones::Action|EString]
		public CrossReference getActionActionCrossReference_1_0() { return cActionActionCrossReference_1_0; }
		
		//EString
		public RuleCall getActionActionEStringParserRuleCall_1_0_1() { return cActionActionEStringParserRuleCall_1_0_1; }
		
		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }
		
		//target=[drones::FieldObject|EString]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//[drones::FieldObject|EString]
		public CrossReference getTargetFieldObjectCrossReference_3_0() { return cTargetFieldObjectCrossReference_3_0; }
		
		//EString
		public RuleCall getTargetFieldObjectEStringParserRuleCall_3_0_1() { return cTargetFieldObjectEStringParserRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.dns2016.drones.behaviour.text.BehavDsl.Choice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTrueBranchAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTrueBranchInstructionParserRuleCall_3_0 = (RuleCall)cTrueBranchAssignment_3.eContents().get(0);
		private final Assignment cTrueBranchAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTrueBranchInstructionParserRuleCall_4_0 = (RuleCall)cTrueBranchAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cFalseBranchAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cFalseBranchInstructionParserRuleCall_6_2_0 = (RuleCall)cFalseBranchAssignment_6_2.eContents().get(0);
		private final Assignment cFalseBranchAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cFalseBranchInstructionParserRuleCall_6_3_0 = (RuleCall)cFalseBranchAssignment_6_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		
		//Choice behav::Choice:
		//	'if' condition=Condition
		//	'{' trueBranch+=Instruction trueBranch+=Instruction* '}' ('else' '{' falseBranch+=Instruction
		//	falseBranch+=Instruction* '}')?
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=Condition '{' trueBranch+=Instruction trueBranch+=Instruction* '}' ('else' '{' falseBranch+=Instruction
		//falseBranch+=Instruction* '}')?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_0() { return cConditionConditionParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//trueBranch+=Instruction
		public Assignment getTrueBranchAssignment_3() { return cTrueBranchAssignment_3; }
		
		//Instruction
		public RuleCall getTrueBranchInstructionParserRuleCall_3_0() { return cTrueBranchInstructionParserRuleCall_3_0; }
		
		//trueBranch+=Instruction*
		public Assignment getTrueBranchAssignment_4() { return cTrueBranchAssignment_4; }
		
		//Instruction
		public RuleCall getTrueBranchInstructionParserRuleCall_4_0() { return cTrueBranchInstructionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//('else' '{' falseBranch+=Instruction falseBranch+=Instruction* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'else'
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//falseBranch+=Instruction
		public Assignment getFalseBranchAssignment_6_2() { return cFalseBranchAssignment_6_2; }
		
		//Instruction
		public RuleCall getFalseBranchInstructionParserRuleCall_6_2_0() { return cFalseBranchInstructionParserRuleCall_6_2_0; }
		
		//falseBranch+=Instruction*
		public Assignment getFalseBranchAssignment_6_3() { return cFalseBranchAssignment_6_3; }
		
		//Instruction
		public RuleCall getFalseBranchInstructionParserRuleCall_6_3_0() { return cFalseBranchInstructionParserRuleCall_6_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
	}
	public class WaitForMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.dns2016.drones.behaviour.text.BehavDsl.WaitForMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWaitforKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeEStringParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cTimeoutAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeoutEFloatParserRuleCall_2_0 = (RuleCall)cTimeoutAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cWhenArrivedAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWhenArrivedInstructionParserRuleCall_4_0 = (RuleCall)cWhenArrivedAssignment_4.eContents().get(0);
		private final Assignment cWhenArrivedAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cWhenArrivedInstructionParserRuleCall_5_0 = (RuleCall)cWhenArrivedAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cTimeoutKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cWhenLostAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cWhenLostInstructionParserRuleCall_9_0 = (RuleCall)cWhenLostAssignment_9.eContents().get(0);
		private final Assignment cWhenLostAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cWhenLostInstructionParserRuleCall_10_0 = (RuleCall)cWhenLostAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//WaitForMessage behav::WaitForMessage:
		//	'waitfor'
		//	type=EString
		//	timeout=EFloat
		//	'{' whenArrived+=Instruction whenArrived+=Instruction* '}'
		//	'timeout' '{' whenLost+=Instruction whenLost+=Instruction* '}'
		@Override public ParserRule getRule() { return rule; }
		
		//'waitfor' type=EString timeout=EFloat '{' whenArrived+=Instruction whenArrived+=Instruction* '}' 'timeout' '{'
		//whenLost+=Instruction whenLost+=Instruction* '}'
		public Group getGroup() { return cGroup; }
		
		//'waitfor'
		public Keyword getWaitforKeyword_0() { return cWaitforKeyword_0; }
		
		//type=EString
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//EString
		public RuleCall getTypeEStringParserRuleCall_1_0() { return cTypeEStringParserRuleCall_1_0; }
		
		//timeout=EFloat
		public Assignment getTimeoutAssignment_2() { return cTimeoutAssignment_2; }
		
		//EFloat
		public RuleCall getTimeoutEFloatParserRuleCall_2_0() { return cTimeoutEFloatParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//whenArrived+=Instruction
		public Assignment getWhenArrivedAssignment_4() { return cWhenArrivedAssignment_4; }
		
		//Instruction
		public RuleCall getWhenArrivedInstructionParserRuleCall_4_0() { return cWhenArrivedInstructionParserRuleCall_4_0; }
		
		//whenArrived+=Instruction*
		public Assignment getWhenArrivedAssignment_5() { return cWhenArrivedAssignment_5; }
		
		//Instruction
		public RuleCall getWhenArrivedInstructionParserRuleCall_5_0() { return cWhenArrivedInstructionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'timeout'
		public Keyword getTimeoutKeyword_7() { return cTimeoutKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//whenLost+=Instruction
		public Assignment getWhenLostAssignment_9() { return cWhenLostAssignment_9; }
		
		//Instruction
		public RuleCall getWhenLostInstructionParserRuleCall_9_0() { return cWhenLostInstructionParserRuleCall_9_0; }
		
		//whenLost+=Instruction*
		public Assignment getWhenLostAssignment_10() { return cWhenLostAssignment_10; }
		
		//Instruction
		public RuleCall getWhenLostInstructionParserRuleCall_10_0() { return cWhenLostInstructionParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.dns2016.drones.behaviour.text.BehavDsl.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInstructionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstructionsInstructionParserRuleCall_3_0 = (RuleCall)cInstructionsAssignment_3.eContents().get(0);
		private final Assignment cInstructionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInstructionsInstructionParserRuleCall_4_0 = (RuleCall)cInstructionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//While behav::While:
		//	'while' condition=Condition
		//	'{' instructions+=Instruction instructions+=Instruction* '}'
		@Override public ParserRule getRule() { return rule; }
		
		//'while' condition=Condition '{' instructions+=Instruction instructions+=Instruction* '}'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_0() { return cConditionConditionParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//instructions+=Instruction
		public Assignment getInstructionsAssignment_3() { return cInstructionsAssignment_3; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_3_0() { return cInstructionsInstructionParserRuleCall_3_0; }
		
		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_4() { return cInstructionsAssignment_4; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_4_0() { return cInstructionsInstructionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class LiftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.dns2016.drones.behaviour.text.BehavDsl.Lift");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLiftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetMovableObjectCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetMovableObjectIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetMovableObjectCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Lift behav::Lift:
		//	'lift'
		//	target=[drones::MovableObject]
		//	';'
		@Override public ParserRule getRule() { return rule; }
		
		//'lift' target=[drones::MovableObject] ';'
		public Group getGroup() { return cGroup; }
		
		//'lift'
		public Keyword getLiftKeyword_0() { return cLiftKeyword_0; }
		
		//target=[drones::MovableObject]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[drones::MovableObject]
		public CrossReference getTargetMovableObjectCrossReference_1_0() { return cTargetMovableObjectCrossReference_1_0; }
		
		//ID
		public RuleCall getTargetMovableObjectIDTerminalRuleCall_1_0_1() { return cTargetMovableObjectIDTerminalRuleCall_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class PlaceObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.dns2016.drones.behaviour.text.BehavDsl.PlaceObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPlaceObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPlaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cObjectKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PlaceObject behav::PlaceObject:
		//	{behav::PlaceObject}
		//	'place' 'object' ';'
		@Override public ParserRule getRule() { return rule; }
		
		//{behav::PlaceObject} 'place' 'object' ';'
		public Group getGroup() { return cGroup; }
		
		//{behav::PlaceObject}
		public Action getPlaceObjectAction_0() { return cPlaceObjectAction_0; }
		
		//'place'
		public Keyword getPlaceKeyword_1() { return cPlaceKeyword_1; }
		
		//'object'
		public Keyword getObjectKeyword_2() { return cObjectKeyword_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class InstructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.dns2016.drones.behaviour.text.BehavDsl.Instruct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInstructKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInstructionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstructionsInstructionParserRuleCall_3_0 = (RuleCall)cInstructionsAssignment_3.eContents().get(0);
		private final Assignment cInstructionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInstructionsInstructionParserRuleCall_4_0 = (RuleCall)cInstructionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Instruct behav::Instruct:
		//	'send' 'instruct'
		//	'{' instructions+=Instruction instructions+=Instruction* '}'
		@Override public ParserRule getRule() { return rule; }
		
		//'send' 'instruct' '{' instructions+=Instruction instructions+=Instruction* '}'
		public Group getGroup() { return cGroup; }
		
		//'send'
		public Keyword getSendKeyword_0() { return cSendKeyword_0; }
		
		//'instruct'
		public Keyword getInstructKeyword_1() { return cInstructKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//instructions+=Instruction
		public Assignment getInstructionsAssignment_3() { return cInstructionsAssignment_3; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_3_0() { return cInstructionsInstructionParserRuleCall_3_0; }
		
		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_4() { return cInstructionsAssignment_4; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_4_0() { return cInstructionsInstructionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SendMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.dns2016.drones.behaviour.text.BehavDsl.SendMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMsgKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMessageTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMessageTypeEStringParserRuleCall_2_0 = (RuleCall)cMessageTypeAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SendMessage behav::SendMessage:
		//	'send' 'msg'
		//	messageType=EString
		//	';'
		@Override public ParserRule getRule() { return rule; }
		
		//'send' 'msg' messageType=EString ';'
		public Group getGroup() { return cGroup; }
		
		//'send'
		public Keyword getSendKeyword_0() { return cSendKeyword_0; }
		
		//'msg'
		public Keyword getMsgKeyword_1() { return cMsgKeyword_1; }
		
		//messageType=EString
		public Assignment getMessageTypeAssignment_2() { return cMessageTypeAssignment_2; }
		
		//EString
		public RuleCall getMessageTypeEStringParserRuleCall_2_0() { return cMessageTypeEStringParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.dns2016.drones.behaviour.text.BehavDsl.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldObjectAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFieldObjectFieldObjectCrossReference_2_0 = (CrossReference)cFieldObjectAssignment_2.eContents().get(0);
		private final RuleCall cFieldObjectFieldObjectIDTerminalRuleCall_2_0_1 = (RuleCall)cFieldObjectFieldObjectCrossReference_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cKeyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cKeyEStringParserRuleCall_4_0 = (RuleCall)cKeyAssignment_4.eContents().get(0);
		private final Assignment cOperationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperationConditionKindEnumRuleCall_5_0 = (RuleCall)cOperationAssignment_5.eContents().get(0);
		private final Assignment cValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValueEStringParserRuleCall_6_0 = (RuleCall)cValueAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Condition behav::Condition:
		//	{behav::Condition}
		//	'('
		//	fieldObject=[drones::FieldObject]
		//	'.'
		//	key=EString
		//	operation=ConditionKind
		//	value=EString
		//	')'
		@Override public ParserRule getRule() { return rule; }
		
		//{behav::Condition} '(' fieldObject=[drones::FieldObject] '.' key=EString operation=ConditionKind value=EString ')'
		public Group getGroup() { return cGroup; }
		
		//{behav::Condition}
		public Action getConditionAction_0() { return cConditionAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//fieldObject=[drones::FieldObject]
		public Assignment getFieldObjectAssignment_2() { return cFieldObjectAssignment_2; }
		
		//[drones::FieldObject]
		public CrossReference getFieldObjectFieldObjectCrossReference_2_0() { return cFieldObjectFieldObjectCrossReference_2_0; }
		
		//ID
		public RuleCall getFieldObjectFieldObjectIDTerminalRuleCall_2_0_1() { return cFieldObjectFieldObjectIDTerminalRuleCall_2_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
		
		//key=EString
		public Assignment getKeyAssignment_4() { return cKeyAssignment_4; }
		
		//EString
		public RuleCall getKeyEStringParserRuleCall_4_0() { return cKeyEStringParserRuleCall_4_0; }
		
		//operation=ConditionKind
		public Assignment getOperationAssignment_5() { return cOperationAssignment_5; }
		
		//ConditionKind
		public RuleCall getOperationConditionKindEnumRuleCall_5_0() { return cOperationConditionKindEnumRuleCall_5_0; }
		
		//value=EString
		public Assignment getValueAssignment_6() { return cValueAssignment_6; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_6_0() { return cValueEStringParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.dns2016.drones.behaviour.text.BehavDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEBooleanParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//EString:
		//	STRING | ID | INT | EBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID | INT | EBoolean
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//EBoolean
		public RuleCall getEBooleanParserRuleCall_3() { return cEBooleanParserRuleCall_3; }
	}
	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.dns2016.drones.behaviour.text.BehavDsl.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cEKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cEKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		//EFloat ecore::EFloat:
		//	INT? '.' INT (('E' | 'e') '-'? INT)?
		@Override public ParserRule getRule() { return rule; }
		
		//INT? '.' INT (('E' | 'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//(('E' | 'e') '-'? INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//('E' | 'e')
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//'E'
		public Keyword getEKeyword_3_0_0() { return cEKeyword_3_0_0; }
		
		//'e'
		public Keyword getEKeyword_3_0_1() { return cEKeyword_3_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_3_1() { return cHyphenMinusKeyword_3_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3_2() { return cINTTerminalRuleCall_3_2; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.dns2016.drones.behaviour.text.BehavDsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false'
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	public class ConditionKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.dns2016.drones.behaviour.text.BehavDsl.ConditionKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALSEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQUALSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EQUALSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOT_EQUALSExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNOT_EQUALSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_THANEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGREATER_THANGreaterThanSignKeyword_2_0 = (Keyword)cGREATER_THANEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLESSER_THANEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLESSER_THANLessThanSignKeyword_3_0 = (Keyword)cLESSER_THANEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ConditionKind returns behav::ConditionKind:
		//	EQUALS='==' | NOT_EQUALS='!=' | GREATER_THAN='>' | LESSER_THAN='<';
		public EnumRule getRule() { return rule; }
		
		//EQUALS='==' | NOT_EQUALS='!=' | GREATER_THAN='>' | LESSER_THAN='<'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQUALS='=='
		public EnumLiteralDeclaration getEQUALSEnumLiteralDeclaration_0() { return cEQUALSEnumLiteralDeclaration_0; }
		
		//'=='
		public Keyword getEQUALSEqualsSignEqualsSignKeyword_0_0() { return cEQUALSEqualsSignEqualsSignKeyword_0_0; }
		
		//NOT_EQUALS='!='
		public EnumLiteralDeclaration getNOT_EQUALSEnumLiteralDeclaration_1() { return cNOT_EQUALSEnumLiteralDeclaration_1; }
		
		//'!='
		public Keyword getNOT_EQUALSExclamationMarkEqualsSignKeyword_1_0() { return cNOT_EQUALSExclamationMarkEqualsSignKeyword_1_0; }
		
		//GREATER_THAN='>'
		public EnumLiteralDeclaration getGREATER_THANEnumLiteralDeclaration_2() { return cGREATER_THANEnumLiteralDeclaration_2; }
		
		//'>'
		public Keyword getGREATER_THANGreaterThanSignKeyword_2_0() { return cGREATER_THANGreaterThanSignKeyword_2_0; }
		
		//LESSER_THAN='<'
		public EnumLiteralDeclaration getLESSER_THANEnumLiteralDeclaration_3() { return cLESSER_THANEnumLiteralDeclaration_3; }
		
		//'<'
		public Keyword getLESSER_THANLessThanSignKeyword_3_0() { return cLESSER_THANLessThanSignKeyword_3_0; }
	}
	
	private final BehavDSLElements pBehavDSL;
	private final DroneBehaviourElements pDroneBehaviour;
	private final ImportElements pImport;
	private final InstructionElements pInstruction;
	private final MoveToElements pMoveTo;
	private final PauseElements pPause;
	private final PerformActionElements pPerformAction;
	private final ChoiceElements pChoice;
	private final WaitForMessageElements pWaitForMessage;
	private final WhileElements pWhile;
	private final LiftElements pLift;
	private final PlaceObjectElements pPlaceObject;
	private final InstructElements pInstruct;
	private final SendMessageElements pSendMessage;
	private final ConditionElements pCondition;
	private final ConditionKindElements eConditionKind;
	private final EStringElements pEString;
	private final EFloatElements pEFloat;
	private final EBooleanElements pEBoolean;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BehavDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBehavDSL = new BehavDSLElements();
		this.pDroneBehaviour = new DroneBehaviourElements();
		this.pImport = new ImportElements();
		this.pInstruction = new InstructionElements();
		this.pMoveTo = new MoveToElements();
		this.pPause = new PauseElements();
		this.pPerformAction = new PerformActionElements();
		this.pChoice = new ChoiceElements();
		this.pWaitForMessage = new WaitForMessageElements();
		this.pWhile = new WhileElements();
		this.pLift = new LiftElements();
		this.pPlaceObject = new PlaceObjectElements();
		this.pInstruct = new InstructElements();
		this.pSendMessage = new SendMessageElements();
		this.pCondition = new ConditionElements();
		this.eConditionKind = new ConditionKindElements();
		this.pEString = new EStringElements();
		this.pEFloat = new EFloatElements();
		this.pEBoolean = new EBooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.mdsd.dns2016.drones.behaviour.text.BehavDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// TODO: separate config files?
	//BehavDSL:
	//	importedMission=Import
	//	behav=DroneBehaviour;
	public BehavDSLElements getBehavDSLAccess() {
		return pBehavDSL;
	}
	
	public ParserRule getBehavDSLRule() {
		return getBehavDSLAccess().getRule();
	}
	
	//DroneBehaviour behav::DroneBehaviour:
	//	'behav'
	//	name=EString
	//	'(' 'interrupt' '=' canBeInterrupted?=EBoolean ')' ';'
	//	'drones' '{' drones+=[drones::Drone] ("," drones+=[drones::Drone])* '}'
	//	instructions+=Instruction instructions+=Instruction*
	public DroneBehaviourElements getDroneBehaviourAccess() {
		return pDroneBehaviour;
	}
	
	public ParserRule getDroneBehaviourRule() {
		return getDroneBehaviourAccess().getRule();
	}
	
	//Import:
	//	'import' importName=STRING;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Instruction behav::Instruction:
	//	MoveTo | Pause | PerformAction | Choice | WaitForMessage | While | Lift | PlaceObject | SendMessage | Instruct
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//MoveTo behav::MoveTo:
	//	'moveto'
	//	fieldObject=[drones::FieldObject]
	//	';'
	public MoveToElements getMoveToAccess() {
		return pMoveTo;
	}
	
	public ParserRule getMoveToRule() {
		return getMoveToAccess().getRule();
	}
	
	//Pause behav::Pause:
	//	'wait'
	//	duration=EFloat
	//	';'
	public PauseElements getPauseAccess() {
		return pPause;
	}
	
	public ParserRule getPauseRule() {
		return getPauseAccess().getRule();
	}
	
	//PerformAction behav::PerformAction:
	//	'action'
	//	action=[drones::Action|EString]
	//	'on'
	//	target=[drones::FieldObject|EString]
	//	';'
	public PerformActionElements getPerformActionAccess() {
		return pPerformAction;
	}
	
	public ParserRule getPerformActionRule() {
		return getPerformActionAccess().getRule();
	}
	
	//Choice behav::Choice:
	//	'if' condition=Condition
	//	'{' trueBranch+=Instruction trueBranch+=Instruction* '}' ('else' '{' falseBranch+=Instruction
	//	falseBranch+=Instruction* '}')?
	public ChoiceElements getChoiceAccess() {
		return pChoice;
	}
	
	public ParserRule getChoiceRule() {
		return getChoiceAccess().getRule();
	}
	
	//WaitForMessage behav::WaitForMessage:
	//	'waitfor'
	//	type=EString
	//	timeout=EFloat
	//	'{' whenArrived+=Instruction whenArrived+=Instruction* '}'
	//	'timeout' '{' whenLost+=Instruction whenLost+=Instruction* '}'
	public WaitForMessageElements getWaitForMessageAccess() {
		return pWaitForMessage;
	}
	
	public ParserRule getWaitForMessageRule() {
		return getWaitForMessageAccess().getRule();
	}
	
	//While behav::While:
	//	'while' condition=Condition
	//	'{' instructions+=Instruction instructions+=Instruction* '}'
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//Lift behav::Lift:
	//	'lift'
	//	target=[drones::MovableObject]
	//	';'
	public LiftElements getLiftAccess() {
		return pLift;
	}
	
	public ParserRule getLiftRule() {
		return getLiftAccess().getRule();
	}
	
	//PlaceObject behav::PlaceObject:
	//	{behav::PlaceObject}
	//	'place' 'object' ';'
	public PlaceObjectElements getPlaceObjectAccess() {
		return pPlaceObject;
	}
	
	public ParserRule getPlaceObjectRule() {
		return getPlaceObjectAccess().getRule();
	}
	
	//Instruct behav::Instruct:
	//	'send' 'instruct'
	//	'{' instructions+=Instruction instructions+=Instruction* '}'
	public InstructElements getInstructAccess() {
		return pInstruct;
	}
	
	public ParserRule getInstructRule() {
		return getInstructAccess().getRule();
	}
	
	//SendMessage behav::SendMessage:
	//	'send' 'msg'
	//	messageType=EString
	//	';'
	public SendMessageElements getSendMessageAccess() {
		return pSendMessage;
	}
	
	public ParserRule getSendMessageRule() {
		return getSendMessageAccess().getRule();
	}
	
	//Condition behav::Condition:
	//	{behav::Condition}
	//	'('
	//	fieldObject=[drones::FieldObject]
	//	'.'
	//	key=EString
	//	operation=ConditionKind
	//	value=EString
	//	')'
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//enum ConditionKind returns behav::ConditionKind:
	//	EQUALS='==' | NOT_EQUALS='!=' | GREATER_THAN='>' | LESSER_THAN='<';
	public ConditionKindElements getConditionKindAccess() {
		return eConditionKind;
	}
	
	public EnumRule getConditionKindRule() {
		return getConditionKindAccess().getRule();
	}
	
	//EString:
	//	STRING | ID | INT | EBoolean;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EFloat ecore::EFloat:
	//	INT? '.' INT (('E' | 'e') '-'? INT)?
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false'
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
