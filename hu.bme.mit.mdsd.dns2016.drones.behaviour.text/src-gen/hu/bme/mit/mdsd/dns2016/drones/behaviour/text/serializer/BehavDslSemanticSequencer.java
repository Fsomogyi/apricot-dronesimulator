/*
 * generated by Xtext 2.9.2
 */
package hu.bme.mit.mdsd.dns2016.drones.behaviour.text.serializer;

import com.google.inject.Inject;
import hu.bme.mit.mdsd.dns2016.behaviour.BehaviourPackage;
import hu.bme.mit.mdsd.dns2016.behaviour.Choice;
import hu.bme.mit.mdsd.dns2016.behaviour.Condition;
import hu.bme.mit.mdsd.dns2016.behaviour.DroneBehaviour;
import hu.bme.mit.mdsd.dns2016.behaviour.Instruct;
import hu.bme.mit.mdsd.dns2016.behaviour.Lift;
import hu.bme.mit.mdsd.dns2016.behaviour.MoveTo;
import hu.bme.mit.mdsd.dns2016.behaviour.Pause;
import hu.bme.mit.mdsd.dns2016.behaviour.PerformAction;
import hu.bme.mit.mdsd.dns2016.behaviour.PlaceObject;
import hu.bme.mit.mdsd.dns2016.behaviour.SendMessage;
import hu.bme.mit.mdsd.dns2016.behaviour.WaitForMessage;
import hu.bme.mit.mdsd.dns2016.behaviour.While;
import hu.bme.mit.mdsd.dns2016.drones.behaviour.text.behavdslmodel.BehavDSL;
import hu.bme.mit.mdsd.dns2016.drones.behaviour.text.behavdslmodel.BehavdslmodelPackage;
import hu.bme.mit.mdsd.dns2016.drones.behaviour.text.behavdslmodel.Import;
import hu.bme.mit.mdsd.dns2016.drones.behaviour.text.services.BehavDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class BehavDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BehavDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BehavdslmodelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BehavdslmodelPackage.BEHAV_DSL:
				sequence_BehavDSL(context, (BehavDSL) semanticObject); 
				return; 
			case BehavdslmodelPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			}
		else if (epackage == BehaviourPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BehaviourPackage.CHOICE:
				sequence_Choice(context, (Choice) semanticObject); 
				return; 
			case BehaviourPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case BehaviourPackage.DRONE_BEHAVIOUR:
				sequence_DroneBehaviour(context, (DroneBehaviour) semanticObject); 
				return; 
			case BehaviourPackage.INSTRUCT:
				sequence_Instruct(context, (Instruct) semanticObject); 
				return; 
			case BehaviourPackage.LIFT:
				sequence_Lift(context, (Lift) semanticObject); 
				return; 
			case BehaviourPackage.MOVE_TO:
				sequence_MoveTo(context, (MoveTo) semanticObject); 
				return; 
			case BehaviourPackage.PAUSE:
				sequence_Pause(context, (Pause) semanticObject); 
				return; 
			case BehaviourPackage.PERFORM_ACTION:
				sequence_PerformAction(context, (PerformAction) semanticObject); 
				return; 
			case BehaviourPackage.PLACE_OBJECT:
				sequence_PlaceObject(context, (PlaceObject) semanticObject); 
				return; 
			case BehaviourPackage.SEND_MESSAGE:
				sequence_SendMessage(context, (SendMessage) semanticObject); 
				return; 
			case BehaviourPackage.WAIT_FOR_MESSAGE:
				sequence_WaitForMessage(context, (WaitForMessage) semanticObject); 
				return; 
			case BehaviourPackage.WHILE:
				sequence_While(context, (While) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     BehavDSL returns BehavDSL
	 *
	 * Constraint:
	 *     (importedMission=Import behav=DroneBehaviour)
	 */
	protected void sequence_BehavDSL(ISerializationContext context, BehavDSL semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BehavdslmodelPackage.Literals.BEHAV_DSL__IMPORTED_MISSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BehavdslmodelPackage.Literals.BEHAV_DSL__IMPORTED_MISSION));
			if (transientValues.isValueTransient(semanticObject, BehavdslmodelPackage.Literals.BEHAV_DSL__BEHAV) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BehavdslmodelPackage.Literals.BEHAV_DSL__BEHAV));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBehavDSLAccess().getImportedMissionImportParserRuleCall_0_0(), semanticObject.getImportedMission());
		feeder.accept(grammarAccess.getBehavDSLAccess().getBehavDroneBehaviourParserRuleCall_1_0(), semanticObject.getBehav());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Choice
	 *     Choice returns Choice
	 *
	 * Constraint:
	 *     (condition=Condition trueBranch+=Instruction trueBranch+=Instruction* (falseBranch+=Instruction falseBranch+=Instruction*)?)
	 */
	protected void sequence_Choice(ISerializationContext context, Choice semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (fieldObject=[FieldObject|ID] key=EString operation=ConditionKind value=EString)
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BehaviourPackage.Literals.CONDITION__FIELD_OBJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BehaviourPackage.Literals.CONDITION__FIELD_OBJECT));
			if (transientValues.isValueTransient(semanticObject, BehaviourPackage.Literals.CONDITION__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BehaviourPackage.Literals.CONDITION__KEY));
			if (transientValues.isValueTransient(semanticObject, BehaviourPackage.Literals.CONDITION__OPERATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BehaviourPackage.Literals.CONDITION__OPERATION));
			if (transientValues.isValueTransient(semanticObject, BehaviourPackage.Literals.CONDITION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BehaviourPackage.Literals.CONDITION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConditionAccess().getFieldObjectFieldObjectIDTerminalRuleCall_2_0_1(), semanticObject.getFieldObject());
		feeder.accept(grammarAccess.getConditionAccess().getKeyEStringParserRuleCall_4_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getConditionAccess().getOperationConditionKindEnumRuleCall_5_0(), semanticObject.getOperation());
		feeder.accept(grammarAccess.getConditionAccess().getValueEStringParserRuleCall_6_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DroneBehaviour returns DroneBehaviour
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         canBeInterrupted?=EBoolean 
	 *         drones+=[Drone|ID] 
	 *         drones+=[Drone|ID]* 
	 *         instructions+=Instruction 
	 *         instructions+=Instruction*
	 *     )
	 */
	protected void sequence_DroneBehaviour(ISerializationContext context, DroneBehaviour semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     importName=STRING
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BehavdslmodelPackage.Literals.IMPORT__IMPORT_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BehavdslmodelPackage.Literals.IMPORT__IMPORT_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportAccess().getImportNameSTRINGTerminalRuleCall_1_0(), semanticObject.getImportName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Instruct
	 *     Instruct returns Instruct
	 *
	 * Constraint:
	 *     (instructions+=Instruction instructions+=Instruction*)
	 */
	protected void sequence_Instruct(ISerializationContext context, Instruct semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Lift
	 *     Lift returns Lift
	 *
	 * Constraint:
	 *     target=[MovableObject|ID]
	 */
	protected void sequence_Lift(ISerializationContext context, Lift semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BehaviourPackage.Literals.LIFT__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BehaviourPackage.Literals.LIFT__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLiftAccess().getTargetMovableObjectIDTerminalRuleCall_1_0_1(), semanticObject.getTarget());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns MoveTo
	 *     MoveTo returns MoveTo
	 *
	 * Constraint:
	 *     fieldObject=[FieldObject|ID]
	 */
	protected void sequence_MoveTo(ISerializationContext context, MoveTo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BehaviourPackage.Literals.MOVE_TO__FIELD_OBJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BehaviourPackage.Literals.MOVE_TO__FIELD_OBJECT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMoveToAccess().getFieldObjectFieldObjectIDTerminalRuleCall_1_0_1(), semanticObject.getFieldObject());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Pause
	 *     Pause returns Pause
	 *
	 * Constraint:
	 *     duration=EFloat
	 */
	protected void sequence_Pause(ISerializationContext context, Pause semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BehaviourPackage.Literals.PAUSE__DURATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BehaviourPackage.Literals.PAUSE__DURATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPauseAccess().getDurationEFloatParserRuleCall_1_0(), semanticObject.getDuration());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns PerformAction
	 *     PerformAction returns PerformAction
	 *
	 * Constraint:
	 *     (action=[Action|EString] target=[FieldObject|EString])
	 */
	protected void sequence_PerformAction(ISerializationContext context, PerformAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BehaviourPackage.Literals.PERFORM_ACTION__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BehaviourPackage.Literals.PERFORM_ACTION__ACTION));
			if (transientValues.isValueTransient(semanticObject, BehaviourPackage.Literals.PERFORM_ACTION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BehaviourPackage.Literals.PERFORM_ACTION__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPerformActionAccess().getActionActionEStringParserRuleCall_1_0_1(), semanticObject.getAction());
		feeder.accept(grammarAccess.getPerformActionAccess().getTargetFieldObjectEStringParserRuleCall_3_0_1(), semanticObject.getTarget());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns PlaceObject
	 *     PlaceObject returns PlaceObject
	 *
	 * Constraint:
	 *     {PlaceObject}
	 */
	protected void sequence_PlaceObject(ISerializationContext context, PlaceObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns SendMessage
	 *     SendMessage returns SendMessage
	 *
	 * Constraint:
	 *     messageType=EString
	 */
	protected void sequence_SendMessage(ISerializationContext context, SendMessage semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BehaviourPackage.Literals.SEND_MESSAGE__MESSAGE_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BehaviourPackage.Literals.SEND_MESSAGE__MESSAGE_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSendMessageAccess().getMessageTypeEStringParserRuleCall_2_0(), semanticObject.getMessageType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns WaitForMessage
	 *     WaitForMessage returns WaitForMessage
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         timeout=EFloat 
	 *         whenArrived+=Instruction 
	 *         whenArrived+=Instruction* 
	 *         whenLost+=Instruction 
	 *         whenLost+=Instruction*
	 *     )
	 */
	protected void sequence_WaitForMessage(ISerializationContext context, WaitForMessage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns While
	 *     While returns While
	 *
	 * Constraint:
	 *     (condition=Condition instructions+=Instruction instructions+=Instruction*)
	 */
	protected void sequence_While(ISerializationContext context, While semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
